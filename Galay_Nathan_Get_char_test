.globl main
.equ STDOUT, 1
.equ STDIN, 0
.equ __NR_READ, 63
.equ __NR_WRITE, 64
.equ __NR_EXIT, 93


//to run this test, type a word into the input box.
//run the code

//output: the first character should be outputted to the terminal

.text

main:
    //main() prolog
    addi sp, sp, -4
    sw ra, 0(sp)

    call getchar  //Call getchar to read a character

    //Print the character read
    mv t0, a0
    mv a0, t0
    call putchar

exit_program:
    //used to terminate the entire program
    //main() epilog
    li a7, __NR_EXIT
    li a0, 0
    ecall

//getchar function
getchar:
   addi sp, sp, -16       //allocate 16 bytes of memory on the stack (ensures that if a larger string than expected is inputted, it can handle it)
   sw ra, 12(sp)          //store the ra on the offset of 12 (lets you keep the address of the function you're in)
   li a7, __NR_READ   //a7 now holds 63 or tells the computer to make a read system call
   li a0, STDIN           //tells the system to read from stdin (keyboard)
   mv a1, sp              //directly copy sp into a1
   
   li a2, 1                   //specifies reading one byte
   ecall                      //tell the system to do the instructions
   blt a0, x0, eof       //branch to eof if a0 is less than 0
   lbu a0, 0(a1)        //loads byte from buffer into a0
   lw ra, 12(sp)        //restore ra
   addi sp, sp, 16    //free the stack
   ret

   eof:  
   li a0, -1               //set a0 to -1
   lw ra, 12(sp)       //restore the ra I saved above
   addi sp, sp, 16    //adjust the stack
   ret

//putchar function
putchar:
    addi sp, sp, -4
    sb a0, 0(sp)
    li a7, __NR_WRITE
    li a0, STDOUT
    mv a1, sp
    li a2, 1
    ecall
    addi sp, sp, 4
    ret

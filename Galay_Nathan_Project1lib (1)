.globl main
.equ STDOUT, 1
.equ STDIN, 0
.equ __NR_READ, 63
.equ __NR_WRITE, 64
.equ __NR_EXIT, 93

//To run the code, compile it first
//Hit run until you see "Enter a message:" is displayed
//type in a string
//hit run until you see your string displayed in the terminal
//if you continue to hit run, you will get an error message.

.text

main:
//main() prolog
   addi sp, sp, -104       //allocate space for local var and saved registers
   sw ra, 100(sp)          //save the retrun address at 100 offset to return to after function call

    la a0, prompt            //Load the address of the prompt string
    call puts                   //tells puts to print the prompt

    la a0, buffer            //Load the address of the buffer
    call gets                 //calls gets to read a line from input into the buffer

    la a0, buffer           //Load the address of the buffer to be printed (stored with the input)
    call puts                //tells puts to print the input from the user

    //main() epilog
    lw ra, 100(sp)        //restore the return address
    addi sp, sp, 104        //fix the stack
    li a7, __NR_EXIT        //loads a7 with the EXIT function
    li a0, 0                      //sets a0 to 0 (success)
    ecall                         //end the program
      
//methods

//###################################################
// reads the next character from stdin and returns it as an unsigned char cast to
// an int , or -1 on end of file or error
//###################################################

getchar:
   addi sp, sp, -8       //allocate 8 bytes of memory on the stack (save ra and a char)
   sw ra, 4(sp)          //store the ra on the offset of 4 (keep the address of getchar)
   li a7, __NR_READ   //a7 now holds 63 or tells the computer to make a read system call
   li a0, STDIN           //tells the system to read from stdin (keyboard)
   li a2, 1                   //specifies reading one byte
   ecall                      //tell the system to do the instructions
                         
   blt a0, x0, eof       //branch to eof if there are no characters left to read
   lbu a0, 0(a1)        //loads byte from buffer into a0
   
   lw ra, 4(sp)          //restore ra
   addi sp, sp, 8       //free the stack
   ret

   eof:  
   li a0, -1                //set a0 to -1 to return an error
   lw ra, 12(sp)       //restore the ra I saved above
   addi sp, sp, 8     //adjust the stack
   ret

//#######################################
// writes the character c , cast to an unsigned char , to stdout
// returns the same input unsigned char
//#######################################

putchar:
    addi sp, sp, -8                   //Allocate space on the stack
    sw ra, 4(sp)                      //store the ra at the offset of 4  
    sb a0, 0(sp)                     //Store the character on the stack
    li a7, __NR_WRITE           //a7 = system call number 64 for write
    li a0, STDOUT                 //a0 = file descriptor for stdout
    mv a1, sp                       //move the stack pointer to a1
    li a2, 1                            //a2 = length of the string (1 byte)
    ecall                               //perform the system call by transferring control to kernal
    addi sp, sp, 8                 //Deallocate stack space
    ret

//#############################################################
//gets is the function that reads from stdin
// reads a line from stdin into the buffer pointed to by s until a terminating
//newline .
// Returns the number of bytes read into the buffer , or -1 on error or end - of - file
//reached
// before reading a newline
//#############################################################

gets:
   addi sp, sp, -8                  //allocate space for the stack
   sw ra, 4(sp)                     //store the ra onto the offset of 4
   mv t0, a0                          //saves the buffer address in t0
   
get_char_loop:

   jal ra, getchar                  //get a character from stdin (stored in a0)
   li t1, -1                            //set t1 to -1 for comparison (EOF)
   beq a0, t1, gets_done     //if -1 is found, branch to the end
   li t1, 10                           //the new line ASCII character stored in t1
   beq a0, t1, gets_done    //Compare for new line
   sb a0, 0(t0)                    //store the character in a0 at address t0
   addi t0, t0, 1                  //incriment to the next character address
 
   beq x0, x0, get_char_loop              //jump back to the loop
   
gets_done:
    li a0, 0                         //add the null character the buffer       
    sb a0, 0(t0)                 //store null char at end of string
    lw ra, 4(sp)                 //restore the ra
    addi sp, sp, 8             //restore the stack
    ret

//###############################################
//writes the string from the gets function recieved
// writes the string s appended with a trailing newline to stdout .
// Returns a nonnegative number on success , or -1 on error
//###############################################

puts:
    addi sp, sp, -8                                //allocate space on stack
    sw ra, 4(sp)                                   //store the ra at offset of 4
    mv t1, a0                                        //Save the address of the string into t1

puts_loop:
    lbu a0, 0(t1)                                   //Load a character
    beq a0, x0, exit_loop                     //If null exit the loop
    jal ra, putchar                               //call putchar
    addi t1, t1, 1                                //increment the address of the pointer
   
    beq x0, x0, puts_loop                //loop until null character is found from gets function

exit_loop:
    lw ra, 4(sp)                               //restore the ra                            
    addi sp, sp, 8                           //restore the stack
    ret

puts_error:
    li a0, -1                                     //Return -1 on error
    ret

.data
prompt:   .ascii  "Enter a message: "
prompt_end:
buffer: .space 100 //allocate 1 byte of space for the buffer where a character will be stored

//the buffer is useful here:
//1: allows for the temporary storage of characters in contiguous memory
//2: complete a string using the null terminator
//3: treat inputs as a string
//4: control input size

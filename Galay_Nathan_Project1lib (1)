.globl main
.equ STDOUT, 1
.equ STDIN, 0
.equ __NR_READ, 63
.equ __NR_WRITE, 64
.equ __NR_EXIT, 93

//To run the code, compile it first
//Hit run until you see "Enter a message:" is displayed
//type in a string
//hit run until you see your string displayed in the terminal
//if you continue to hit run, you will get an error message.

.text

main:
//main() prolog
   addi sp, sp, -104       //allocate space for local var and saved registers
   sw ra, 100(sp)          //save the retrun address at 100 offset to return to after function call

    la a0, prompt            //Load the address of the prompt string
    call puts                   //tells puts to print the prompt

    la a0, buffer            //Load the address of the buffer
    call gets                 //calls gets to read a line from input into the buffer

    la a0, buffer           //Load the address of the buffer to be printed (stored with the input)
    call puts                //tells puts to print the input from the user
    
    li a0, 10                //load a0 with the newline character
    call putchar          //print a new line after execution

    //main() epilog
    lw ra, 100(sp)        //restore the return address
    addi sp, sp, 104        //fix the stack
    li a7, __NR_EXIT        //loads a7 with the EXIT function
    li a0, 0                      //sets a0 to 0 (success)
    ecall                         //end the program
      
//methods

//###################################################
// reads the next character from stdin and returns it as an unsigned char cast to
// an int , or -1 on end of file or error
//###################################################

getchar:
    addi sp, sp, -8            // Allocate space on the stack for the return address (ra)
    sw ra, 4(sp)               // Store ra at offset 4 in the stack
    
    li a7, __NR_READ           // Load system call number for read (63)
    li a0, STDIN               // File descriptor for stdin (0)
    li a2, 1                   // Read 1 byte
    ecall                      // Make the system call (read)
    
    blt a0, x0, eof            // If result in a0 is negative, branch to eof (EOF or error)
    lbu a0, 0(a1)              // Load byte from buffer (a1 points to the buffer)
    
    lw ra, 4(sp)               // Restore return address (ra)
    addi sp, sp, 8             // Deallocate space from the stack
    ret

eof:
    li a0, -1                  // Return -1 on EOF or error
    lw ra, 4(sp)               // Restore return address (ra)
    addi sp, sp, 8             // Deallocate space from the stack
    ret


//#######################################
// writes the character c , cast to an unsigned char , to stdout
// returns the same input unsigned char
//#######################################

putchar:  
    sb a0, 0(sp)                     //Store the character on the stack
    li a7, __NR_WRITE           //a7 = system call number 64 for write
    li a0, STDOUT                 //a0 = file descriptor for stdout
    mv a1, sp                       //move the stack pointer to a1
    li a2, 1                            //a2 = length of the string (1 byte)
    ecall                               //perform the system call and write the character to STDOUT
    ret

//#############################################################
//gets is the function that reads from stdin
// reads a line from stdin into the buffer pointed to by s until a terminating
//newline .
// Returns the number of bytes read into the buffer , or -1 on error or end - of - file
//reached
// before reading a newline
//#############################################################

gets:
   addi sp, sp, -16                // allocate space for the stack (8 bytes for ra, 8 bytes for t0)
   sw ra, 12(sp)                   // store the return address onto the stack at offset 12
   sw a0, 4(sp)                    // store the buffer pointer (t0) onto the stack at offset 4
   mv t0, a0                       // save the buffer address in t0
   
get_char_loop:
   jal ra, getchar                 // get a character from stdin (stored in a0)
   li t1, -1                       // set t1 to -1 for EOF comparison
   beq a0, t1, gets_done           // if EOF (-1), branch to gets_done
   li t1, 10                        // ASCII value of new line character
   beq a0, t1, gets_done           // if new line (ASCII 10), branch to gets_done
   sb a0, 0(t0)                    // store the character in the buffer at address t0
   addi t0, t0, 1                  // increment the buffer pointer to the next address
   
   beq x0, x0, get_char_loop       // jump back to the loop to get next character

gets_done:
   li a0, 0                         // add the null terminator (ASCII 0) to the buffer
   sb a0, 0(t0)                     // store null terminator at the end of the string
   
   lw t0, 4(sp)                     // restore the buffer pointer (t0) from the stack
   lw ra, 12(sp)                    // restore the return address (ra) from the stack
   addi sp, sp, 16                  // restore the stack (deallocate 16 bytes)
   ret


//###############################################
//writes the string from the gets function recieved
// writes the string s appended with a trailing newline to stdout .
// Returns a nonnegative number on success , or -1 on error
//###############################################

puts:
    addi sp, sp, -8            // allocate space on stack
    sw ra, 4(sp)               // store the ra at offset of 4
    mv t1, a0                  // save the address of the string into t1

puts_loop:
    lbu a0, 0(t1)              // load a character from the string
    beq a0, x0, exit_loop      // if null (end of string), exit the loop
    jal ra, putchar            // call putchar to write the character
    addi t1, t1, 1             // increment the address of the pointer to the next character
    
    beq x0, x0, puts_loop      // loop until null character is found from gets function

exit_loop:
    lw ra, 4(sp)               // restore the ra
    addi sp, sp, 8             // restore the stack
    ret


.data
prompt:   .ascii  "Enter a message: "
prompt_end:
buffer: .space 100 //allocate 1 byte of space for the buffer where a character will be stored

//the buffer is useful here:
//1: allows for the temporary storage of characters in contiguous memory
//2: complete a string using the null terminator
//3: treat inputs as a string
//4: control input size
